1. Scatter Plot using Matplotlib (Iris Dataset)

Steps:
1 Import required libraries: pandas and matplotlib.pyplot.

2 Load the dataset: Read Iris.csv using pd.read_csv().

3 Create a scatter plot:

 Sepal Length vs Sepal Width (Blue).
 Petal Length vs Petal Width (Red).

5 Add labels, title, and legend for better readability.

6  Display the plot using plt.show()

//code

import pandas as pd
import matplotlib.pyplot as plt

# Step 1: Load the dataset
df = pd.read_csv("Iris.csv")

# Step 2: Create a scatter plot - Sepal Dimensions
plt.scatter(df["SepalLengthCm"], df["SepalWidthCm"], c='blue', label="Sepal", alpha=0.6)
plt.xlabel("Sepal Length (cm)")
plt.ylabel("Sepal Width (cm)")
plt.title("Scatter Plot of Sepal Dimensions")

# Step 3: Create a scatter plot - Petal Dimensions
plt.scatter(df["PetalLengthCm"], df["PetalWidthCm"], c='red', label="Petal", alpha=0.6)

# Step 4: Display plot with legend
plt.legend()
plt.show()


2. Handling Missing Data (Replace Nulls with Mean using SimpleImputer)

Steps:

1 Import required libraries: pandas and SimpleImputer.

2 Load the dataset: Read Iris.csv.

3 Check for missing values using df.isnull().sum().

4 Replace missing values with the column mean using SimpleImputer(strategy='mean').

5 Save the cleaned dataset as Iris_cleaned.csv.

//Code

import pandas as pd
from sklearn.impute import SimpleImputer

# Step 1: Load the dataset
df = pd.read_csv("Iris.csv")

# Step 2: Check for missing values
print("Missing values before imputation:\n", df.isnull().sum())

# Step 3: Replace missing values with the mean
imputer = SimpleImputer(strategy='mean')
df.iloc[:, 1:-1] = imputer.fit_transform(df.iloc[:, 1:-1])  # Apply to numeric columns

# Step 4: Verify missing values are handled
print("Missing values after imputation:\n", df.isnull().sum())

# Step 5: Save cleaned dataset
df.to_csv("Iris_cleaned.csv", index=False)


3. Encoding Categorical Data (LabelEncoder & OneHotEncoder on Iris Dataset)

Steps:

1 Import required libraries: pandas, LabelEncoder, and OneHotEncoder.

2 Load the dataset: Read Iris.csv.

3 Apply LabelEncoder() to convert "Species" into numeric values.

4 Apply OneHotEncoder() to transform "Species" into multiple binary columns.

5 Drop the original "Species" column and concatenate the new encoded columns.

6 Save the encoded dataset as Iris_encoded.csv.

//Code

import pandas as pd
from sklearn.preprocessing import LabelEncoder, OneHotEncoder

# Step 1: Load the dataset
df = pd.read_csv("Iris.csv")

# Step 2: Apply Label Encoding
label_encoder = LabelEncoder()
df["Species_Label"] = label_encoder.fit_transform(df["Species"])
print("Label Encoded Species:\n", df[["Species", "Species_Label"]].head())

# Step 3: Apply One-Hot Encoding
onehot_encoder = OneHotEncoder(sparse_output=False, drop="first")  # Drop first to avoid redundancy
species_encoded = onehot_encoder.fit_transform(df[["Species"]])
species_encoded_df = pd.DataFrame(species_encoded, columns=onehot_encoder.get_feature_names_out(["Species"]))

# Step 4: Concatenate new columns and drop original "Species"
df = pd.concat([df, species_encoded_df], axis=1)
df.drop("Species", axis=1, inplace=True)

# Step 5: Save the transformed dataset
df.to_csv("Iris_encoded.csv", index=False)
print(df.head())


4. Feature Scaling using Standardization (Salary_Data.csv)

Steps:
Import required libraries: pandas and StandardScaler.

Load the dataset: Read Salary_Data.csv.

Apply StandardScaler() to scale the "YearsExperience" and "Salary" columns.

Save the scaled dataset as Salary_Data_Scaled.csv.

// Code
import pandas as pd
from sklearn.preprocessing import StandardScaler

# Step 1: Load the dataset
df = pd.read_csv("Salary_Data.csv")

# Step 2: Apply Standardization
scaler = StandardScaler()
df[["YearsExperience", "Salary"]] = scaler.fit_transform(df[["YearsExperience", "Salary"]])

# Step 3: Save the scaled dataset
df.to_csv("Salary_Data_Scaled.csv", index=False)
print(df.head())

